{"version":3,"sources":["../react-complete-guide/src/registerServiceWorker.js"],"names":["isLocalhost","Boolean","window","process","publicUrl","swUrl","checkValidServiceWorker","navigator","console","registerValidSW","registration","installingWorker","fetch","response"],"mappings":"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","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"file":"registerServiceWorker.js"}